//
//  ExpandablePresenter.swift
//  ARExpandableCell
//
//  Created by Antony Raphel on 09/01/19.
//  Copyright (c) 2019 Antony Raphel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExpandablePresentationLogic {
    func presentInitial(response: Expandable.Initial.Response)
}

class ExpandablePresenter: ExpandablePresentationLogic {
    weak var viewController: ExpandableDisplayLogic?
    
    // MARK: Do Initial
    
    func presentInitial(response: Expandable.Initial.Response) {
        let productViewModel = getProductViewModel(response: response)
        let viewModel = Expandable.Initial.ViewModel(summary: productViewModel)
        viewController?.displayInitial(viewModel: viewModel)
    }
    
    // MARK: Private func
    
    private func getProductViewModel(response: Expandable.Initial.Response) -> [Expandable.Initial.ViewModel.ProductViewModel] {
        let products = response.summary.map { Expandable.Initial.ViewModel.ProductViewModel(state: $0.state,
                                                                                            type: $0.type,
                                                                                            title: $0.title,
                                                                                            products: getAll(product: $0.products))
        }
        return products
    }
    
    private func getAll(product: [Expandable.Initial.Response.ProductResponse.AppleProductResponse]) -> [Expandable.Initial.ViewModel.ProductViewModel.AppleProductViewModel] {
        let products = product.map { Expandable.Initial.ViewModel.ProductViewModel.AppleProductViewModel(title: $0.title) }
        return products
    }
}
